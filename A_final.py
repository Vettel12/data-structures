"""
Задание связано с обратной польской нотацией. Она используется для парсинга
арифметических выражений. По сравнению с другим приемом, применяемым для данной
задачи - использованием дерева операций, она является более компактной, так как в ней не
используются скобки. Еще её иногда называют обратной польской записью или постфиксной
нотацией.
В постфиксной нотации операнды расположены перед знаками операций.
Пример 1:
3 4 +
будет равно 7, и означает 3 + 4
Пример 2:
10 2 4*
будет равно 2, и означает 10 - 2 * 4
Разберем последний пример подробнее:
Знак * стоит сразу после чисел 2 и 4, значит к ним нужно применить операцию, которую этот
знак обозначает, то есть перемножить эти два числа. В результате получим 8
После этого выражение приобретет вид:
10 8 -
Операцию минус нужно применить к двум идущим перед ней числам, то есть 10 и 8. В итоге
получаем 2.
Рассмотрим алгоритм более подробно. Для его реализации будем использовать стек.
Для вычисления значения выражения, записанного в обратной польской нотации,
считывать выражение слева направо и придерживаться следующих шагов:
нужно
1. Обработка входного символа: - Если на вход подан операнд, он помещается на вершину
стека. - Если на вход подан знак операции, она выполняется над требуемым количеством
значений из стека, взятых в порядке добавления. Результат выполненной операции
помещается на вершину стека. 2. Если входной набор символов обработан не полностью,
перейти к шагу 1. 3. После полной обработки входного набора символов результат вычисления
выражения находится в вершине стека.
Формат ввода
В единственной строке дано выражение, записанное в обратной польской нотации.
арифметические операции отделены друг от друга пробелами.
На вход могут подаваться операции: +, -, *, / и числа, по модулю не превосходящие
Числа и
10000.
Гарантируется, что значение промежуточных выражений в тестовых данных по модулю
больше 50000.
не

Ввод
10 2 4 * -

Вывод
2

Ввод
2 1 + 3 *

Вывод
9

Ввод
7 2 + 4 * 2 +

Вывод
38

"""

class Calculator:
    def __init__(self, string):
        self.string = string
        self.stack = []
        self.result = 0

    def calculate(self):
        for x in self.string:
            if x.isdigit():
                self.stack.append(x)
            elif x == '+':
                    num2 = int(self.stack.pop())
                    num1 = int(self.stack.pop())
                    self.stack.append(num1 + num2)
            elif x == '-':
                    num2 = int(self.stack.pop())
                    num1 = int(self.stack.pop())
                    self.stack.append(num1 - num2)
            elif x == '*':
                    num2 = int(self.stack.pop())
                    num1 = int(self.stack.pop())
                    self.stack.append(num1 * num2)
            elif x == '/':
                    num2 = int(self.stack.pop())
                    num1 = int(self.stack.pop())
                    self.stack.append(num1 // num2)
        self.result = int(self.stack.pop())
        return self.result

def main():
    try:
        string = input().split()
        for x in string:
            if x.isdigit() and abs(int(x)) > 10000:
                raise ValueError
        print(Calculator(string).calculate())
    except ValueError:
        print('error')

if __name__ == '__main__':
    main()